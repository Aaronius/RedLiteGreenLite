<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"
		 implements="com.aaronhardy.rlgl.view.groupStatus.IGroupStatus"
		 skinClass="com.aaronhardy.rlgl.view.skin.GroupStatusSkin"
		 backgroundColor="0x000000" backgroundAlpha=".2">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.aaronhardy.rlgl.controller.events.SetGroupStateEvent;
			import com.aaronhardy.rlgl.enums.Color;
			
			[Bindable]
			protected var _group:String;
			
			public function set group(value:String):void
			{
				_group = value;
			}
			
			[Bindable]
			protected var _alias:String;
			
			public function set alias(value:String):void
			{
				_alias = value;
			}	
			
			[Bindable]
			protected var _status:String;
			
			public function set status(value:String):void
			{
				_status = value;
			}
			
			[Bindable]
			protected var _lastModifiedAlias:String;
			
			public function set lastModifiedAlias(value:String):void
			{
				_lastModifiedAlias = value;
			}
			
			[Bindable]
			protected var _appVersion:String;
			
			public function set appVersion(value:String):void
			{
				_appVersion = value;
			}
			
			protected function getToggleButtonLabel(status:String):String
			{
				var label:String = 'Go ';
				label += status == Color.GREEN ?
					Color.getLabel(Color.RED) : Color.getLabel(Color.GREEN);
				label += '!';
				return label;
			}
			
			protected function getToggleButtonChrome(status:String):uint
			{
				switch (status)
				{
					case Color.GREEN:
						return 0xB90000;
					case Color.RED:
					default:
						return 0x00B900;
				}
			}
			
			protected function toggleStatus():void
			{
				var newStatus:String = _status == Color.GREEN ? Color.RED : Color.GREEN;
				dispatchEvent(new SetGroupStateEvent(SetGroupStateEvent.SET_GROUP_STATE,
					_group, _alias, newStatus));
			}
			
			protected function labelSanitizer(value:String):String
			{
				return value ? value : 'N/A';
			}
		]]>
	</fx:Script>
	
	<s:VGroup width="185" height="100%" horizontalCenter="0" top="25" gap="10">
		<s:HGroup width="100%">
			<s:Label text="Status:"/>
			<s:Label text="{Color.getLabel(_status)}" 
					color="{Color.getUint(_status)}" 
					width="100%" textAlign="right" 
					maxDisplayedLines="1"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Label text="Set by:" paddingLeft="0"/>
			<s:Label text="{labelSanitizer(_lastModifiedAlias)}" 
					width="100%" textAlign="right" 
					maxDisplayedLines="1"/>
		</s:HGroup>
		<s:Line width="100%" alpha=".1">
			<s:stroke>
				<s:SolidColorStroke color="#ffffff"/>
			</s:stroke> 
		</s:Line>
		<s:HGroup width="100%">
			<s:Label text="Alias:"/>
			<s:Label text="{labelSanitizer(_alias)}" 
					width="100%" textAlign="right" 
					maxDisplayedLines="1"/>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Label text="Group:"/>
			<s:Label text="{labelSanitizer(_group)}" 
					width="100%" textAlign="right" 
					maxDisplayedLines="1"/>
		</s:HGroup>
		<s:Line width="100%" alpha=".1" visible="{_status != null}">
			<s:stroke>
				<s:SolidColorStroke color="#ffffff"/>
			</s:stroke> 
		</s:Line>
		<s:Button width="100%" height="25"
				label="{getToggleButtonLabel(_status)}"
				chromeColor="{getToggleButtonChrome(_status)}"
				visible="{_status != null}"
				click="toggleStatus();"/>
	</s:VGroup>
	
	<s:Label id="versionLabel" 
			text="v{_appVersion}"
			bottom="2" right="2"
			fontSize="9"
			color="#5C5C5C"
			maxDisplayedLines="1"/>
</s:SkinnableContainer>
